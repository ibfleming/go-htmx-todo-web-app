package templates

import (
	"fmt"
	"sort"
	"zion/internal/storage/schema"
)

templ TodoPage() {
	<div class="w-full flex flex-col justify-center px-8">
		@CreateTodoForm()
		<hr class="w-full border-neutral-300"/>
		<div class="h-full py-4">
			<div class="px-4">
				<ul
					id="todo-list"
					hx-get="/todos"
					hx-trigger="load once"
					hx-swap="innerHTML"
					class="auto-rows-[min-content] grid-cols-[repeat(auto-fill,_minmax(256px,_1fr))] w-full grid items-start gap-6"
				></ul>
			</div>
		</div>
		<hr class="w-full border-neutral-300"/>
	</div>
	<script>
    document.addEventListener("removeEmptyMessage", () => {
        const emptyMsg = document.getElementById("empty-todo-msg");
        if (emptyMsg) {
            emptyMsg.remove();
        }
    });
	</script>
}

templ TodoList(todos []*schema.Todo) {
	for _, todo := range todos {
		@SingleTodo(todo)
	}
}

templ EmptyTodoList() {
	<li id="empty-todo-msg" class="font-mono text-sm text-red-700">
		no todos found
	</li>
}

templ SingleTodo(todo *schema.Todo) {
	<li
		id={ "todo-" + fmt.Sprint(todo.ID) }
		class="p-2 font-mono bg-gray-50 rounded-sm border border-neutral-500 shadow-sm"
	>
		<div class="flex pb-2">
			<div class="w-2/3 flex flex-col justify-start">
				<h1 class="text-sm truncate">{ todo.Title }</h1>
				<h2 class="text-xs text-neutral-500 truncate">{ todo.Description }</h2>
			</div>
			<div class="w-1/3 flex justify-end items-start">
				<button
					aria-label="Delete Todo"
					hx-delete={ "/todos/" + fmt.Sprint(todo.ID) }
					hx-target={ "#todo-" + fmt.Sprint(todo.ID) }
					hx-swap="outerHTML"
					hx-trigger="click"
					class="negative zion-button"
				>
					delete
				</button>
			</div>
		</div>
		<hr class="w-full border-neutral-300"/>
		<ul
			id={ "todo-item-list-" + fmt.Sprint(todo.ID) }
			class="flex flex-col gap-2 py-1.5"
		>
			@TodoItemList(todo.Items)
		</ul>
		<hr class="w-full border-neutral-300"/>
		<div class="flex justify-between items-center pt-2">
			@CreateTodoItem()
			<p class="font-mono text-xs text-neutral-500">{ todo.CreatedAt.Format("01/02/2006") }</p>
		</div>
	</li>
}

templ TodoItemList(items []schema.TodoItem) {
	if len(items) == 0 {
		@EmptyTodoItemList()
	} else {
		{{
			sort.Slice(items, func(i, j int) bool {
				if items[i].CreatedAt.Equal(items[j].CreatedAt) {
					return items[i].ID < items[j].ID
				}
				return items[i].CreatedAt.Before(items[j].CreatedAt)
			})
		}}
		for i, item := range items {
			@SingleTodoItem(i, item)
		}
	}
}

templ EmptyTodoItemList() {
	<li id="empty-todo-item-msg" class="font-mono text-xs text-red-700">
		no items found
	</li>
}

templ SingleTodoItem(index int, item schema.TodoItem) {
	<li
		id={ "item-" + fmt.Sprint(item.ID) }
		class="font-mono text-xs"
	>
		<div class="flex justify-between items-center gap-2">
			<div class="flex-grow flex justify-start items-center gap-2">
				<h1 class="text-neutral-500">{ fmt.Sprint(index + 1) + "." }</h1>
				<div
					id={ "item-content-" + fmt.Sprint(item.ID) }
					hx-get={ "/todos/item/edit/" + fmt.Sprint(item.ID) }
					hx-trigger="click"
					hx-target="this"
					hx-swap="outerHTML"
					title="click to edit"
					class="w-full truncate cursor-text"
				>
					{ item.Content }
				</div>
			</div>
			<input
				type="checkbox"
				name="checked"
				class="form-checkbox cursor-pointer"
				hx-post={ "/todos/item/toggle/" + fmt.Sprint(item.ID) }
				hx-trigger="click"
				title="click to mark as done"
				checked?={ item.Checked }
			/>
		</div>
	</li>
}

templ EditTodoItem(item *schema.TodoItem) {
	<input
		id={ "check-box-" + fmt.Sprint(item.ID) }
		type="text"
		name="content"
		value={ item.Content }
		class="form-input w-full p-0.5 px-2 font-mono text-xs rounded-sm border border-neutral-300"
		autofocus
		hx-post={ "/todos/item/edit/content/" + fmt.Sprint(item.ID) }
		hx-trigger="blur, keyup changed delay:1000ms"
		hx-target="this"
		hx-swap="outerHTML"
	/>
}

templ ContentItem(item *schema.TodoItem) {
	<div
		id={ "item-content-" + fmt.Sprint(item.ID) }
		hx-get={ "/todos/item/edit/" + fmt.Sprint(item.ID) }
		hx-trigger="click"
		hx-target="this"
		hx-swap="outerHTML"
		title="click to edit"
		class="w-full truncate cursor-text"
	>
		{ item.Content }
	</div>
}

templ CreateTodoItem() {
	<button class="zion-button">new item</button>
}

templ CreateTodoForm() {
	<div
		id="create-todo-form"
		hx-ext="response-targets"
		class="flex justify-between gap-2 px-4 pb-3"
	>
		<div class="flex-grow max-w-[32rem] min-w-24 flex flex-col gap-1">
			<label for="create-todo-form" class="font-mono text-sm font-semibold text-neutral-800">create todo</label>
			<form
				hx-post="/todos"
				hx-trigger="submit"
				hx-target="#todo-list"
				hx-swap="beforeend"
				class="flex items-center gap-2"
			>
				<input
					type="text"
					name="title"
					value="Test Todo"
					placeholder="title"
					class="form-input w-full p-0.5 px-2 font-mono text-xs rounded-sm border border-neutral-300"
					required
				/>
				<input
					type="text"
					name="description"
					value="Test description."
					placeholder="description"
					class="form-input w-full p-0.5 px-2 font-mono text-xs rounded-sm border border-neutral-300"
				/>
				<button
					aria-label="Create Todo"
					type="submit"
					class="zion-button"
				>
					create
				</button>
			</form>
		</div>
		<div class="mb-[1px] flex items-end">
			<button
				aria-label="Delete Todo"
				hx-delete="/todos/all"
				hx-target="#todo-list"
				hx-swap="innerHTML"
				hx-trigger="click"
				hx-confirm="Are you sure you want to delete all todos?"
				class="negative zion-button flex-nowrap text-nowrap"
			>
				delete all
			</button>
		</div>
	</div>
}
