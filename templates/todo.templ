package templates

import (
	"fmt"
	"sort"
	"zion/internal/storage/schema"
)

templ TodoPage() {
	<div class="flex flex-col justify-center px-8">
		@CreateTodoForm()
		<hr class="w-full border-neutral-300"/>
		<div class="px-4 py-4">
			<ul
				id="todo-list"
				hx-get="/todos/"
				hx-trigger="load once"
				hx-swap="innerHTML"
				class="auto-rows-[min-content] grid-cols-[repeat(auto-fill,_minmax(320px,_1fr))] w-full h-full grid items-start gap-6"
			></ul>
		</div>
		<hr class="w-full border-neutral-300"/>
	</div>
}

templ TodoList(todos []*schema.Todo) {
	for _, todo := range todos {
		@SingleTodo(todo)
	}
}

templ SingleTodo(todo *schema.Todo) {
	<li
		id={ "todo-" + fmt.Sprint(todo.ID) }
		error-id={ templ.JSONString(todo.ID) }
		class="p-2 font-mono bg-gray-50 rounded-sm border border-neutral-500 shadow-sm"
	>
		<div class="flex pb-2">
			<div class="w-2/3 flex flex-col justify-start">
				<h1 class="text-sm truncate">{ todo.Title }</h1>
				<h2 class="text-xs text-neutral-500 truncate">{ todo.Description }</h2>
			</div>
			<div class="w-1/3 flex justify-end items-start">
				<button
					aria-label="Delete Todo"
					hx-delete={ "/todos/" + fmt.Sprint(todo.ID) }
					hx-target={ "#todo-" + fmt.Sprint(todo.ID) }
					hx-swap="outerHTML"
					hx-trigger="click"
					class="negative zion-button"
				>
					delete
				</button>
			</div>
		</div>
		<hr class="w-full border-neutral-300"/>
		<ul
			id={ "todo-item-list-" + fmt.Sprint(todo.ID) }
			class="flex flex-col gap-2 py-1.5"
		>
			@TodoItemList(todo)
		</ul>
		<hr class="w-full border-neutral-300"/>
		<div class="flex justify-between items-center pt-2">
			@CreateTodoItem(todo)
			<p class="font-mono text-xs text-neutral-500">{ todo.CreatedAt.Format("01/02/2006") }</p>
		</div>
	</li>
}

templ TodoItemList(todo *schema.Todo) {
	if len(todo.Items) == 0 {
		@EmptyTodoItemList(fmt.Sprint(todo.ID))
	} else {
		{{
			// sort items by created_at
			sort.Slice(todo.Items, func(i, j int) bool {
				if todo.Items[i].CreatedAt.Equal(todo.Items[j].CreatedAt) {
					return todo.Items[i].ID < todo.Items[j].ID
				}
				return todo.Items[i].CreatedAt.Before(todo.Items[j].CreatedAt)
			})
		}}
		for _, item := range todo.Items {
			@SingleTodoItem(item)
		}
	}
}

templ SingleTodoItem(item schema.TodoItem) {
	<li
		id={ "item-" + fmt.Sprint(item.ID) }
		class="w-full h-full font-mono text-xs"
	>
		<div class="flex justify-between items-center gap-2">
			<div class="flex-grow w-4/5 flex justify-start items-center gap-2 truncate">
				<h1 class="text-neutral-500">*</h1>
				if item.Checked {
					@CompletedTodoItem(&item)
				} else {
					@NotCompletedTodoItem(&item)
				}
			</div>
			<input
				type="checkbox"
				name="checked"
				class="form-checkbox cursor-pointer"
				hx-post={ "/todos/item/toggle/" + fmt.Sprint(item.ID) }
				hx-trigger="click"
				hx-target={ "#item-content-" + fmt.Sprint(item.ID) }
				hx-swap="outerHTML"
				title="click to mark as done"
				checked?={ item.Checked }
			/>
			<button
				aria-label="Delete Todo item"
				title="click to remove this todo item"
				hx-delete={ "/todos/item/" + fmt.Sprint(item.TodoID) + "/" + fmt.Sprint(item.ID) }
				hx-target={ "#item-" + fmt.Sprint(item.ID) }
				hx-swap="outerHTML"
				hx-trigger="click"
				class="!h-4 !p-0 !rounded-none !w-4 negative zion-button mx-auto"
			>
				x
			</button>
		</div>
	</li>
}

templ SingleEditTodoItem(index int, item schema.TodoItem) {
	<li
		id={ "item-" + fmt.Sprint(item.ID) }
		class="w-full h-full font-mono text-xs"
	>
		<div class="flex justify-between items-center gap-2">
			<div class="flex-grow w-4/5 flex justify-start items-center gap-2 truncate">
				<h1 class="text-neutral-500">{ fmt.Sprint(index + 1) + "." }</h1>
				@EditTodoItem(&item)
			</div>
			<input
				type="checkbox"
				name="checked"
				class="form-checkbox cursor-pointer"
				hx-post={ "/todos/item/toggle/" + fmt.Sprint(item.ID) }
				hx-trigger="click"
				title="click to mark as done"
				checked?={ item.Checked }
			/>
			<button
				aria-label="Delete Todo item"
				title="click to remove this todo item"
				hx-delete={ "/todos/item/" + fmt.Sprint(item.TodoID) + "/" + fmt.Sprint(item.ID) }
				hx-target={ "#item-" + fmt.Sprint(item.ID) }
				hx-swap="outerHTML"
				hx-trigger="click"
				class="!h-4 !p-0 !rounded-none !w-4 negative zion-button mx-auto"
			>
				x
			</button>
		</div>
	</li>
}

templ EditTodoItem(item *schema.TodoItem) {
	<input
		id={ "check-box-" + fmt.Sprint(item.ID) }
		type="text"
		name="content"
		value={ item.Content }
		class="form-input w-full p-0.5 px-2 font-mono text-xs rounded-sm border border-neutral-300"
		autofocus
		hx-post={ "/todos/item/edit/content/" + fmt.Sprint(item.ID) }
		hx-trigger="blur, keyup[key=='Enter']"
		hx-target="this"
		hx-swap="outerHTML"
	/>
}

templ NotCompletedTodoItem(item *schema.TodoItem) {
	<div
		id={ "item-content-" + fmt.Sprint(item.ID) }
		hx-get={ "/todos/item/edit/" + fmt.Sprint(item.ID) }
		hx-trigger="click"
		hx-target="this"
		hx-swap="outerHTML"
		title="click to edit"
		class="w-full cursor-text"
	>
		if item.Content == "" {
			<p class="text-neutral-500">click to edit</p>
		} else {
			<p>{ item.Content }</p>
		}
	</div>
}

templ CompletedTodoItem(item *schema.TodoItem) {
	<div
		id={ "item-content-" + fmt.Sprint(item.ID) }
		class="w-full text-neutral-500"
	>
		if item.Content == "" {
			<p style="text-decoration: line-through;">click to edit</p>
		} else {
			<p style="text-decoration: line-through;">{ item.Content }</p>
		}
	</div>
}

templ CreateTodoItem(todo *schema.Todo) {
	<button
		hx-post={ "/todos/item/" + fmt.Sprint(todo.ID) }
		hx-target={ "#todo-item-list-" + fmt.Sprint(todo.ID) }
		hx-swap="beforeend"
		hx-on::after-request={ removeEmptyTodoListMessage(fmt.Sprint(todo.ID)) }
		class="zion-button"
	>new item</button>
}

templ CreateTodoForm() {
	<div
		id="create-todo-form"
		hx-ext="response-targets"
		class="flex justify-between gap-2 px-4 pb-3"
	>
		<div class="flex-grow max-w-[32rem] min-w-24 flex flex-col gap-1">
			<label for="create-todo-form" class="font-mono text-sm font-semibold text-neutral-800">create todo</label>
			<form
				hx-post="/todos/"
				hx-trigger="submit"
				hx-target="#todo-list"
				hx-swap="beforeend"
				hx-on::after-request={ removeEmptyTodoMessage() }
				class="flex items-center gap-2"
			>
				<input
					type="text"
					name="title"
					placeholder="title"
					class="form-input w-full p-0.5 px-2 font-mono text-xs rounded-sm border border-neutral-300"
					required
				/>
				<input
					type="text"
					name="description"
					placeholder="description"
					class="form-input w-full p-0.5 px-2 font-mono text-xs rounded-sm border border-neutral-300"
				/>
				<button
					aria-label="Create Todo"
					type="submit"
					class="zion-button"
				>
					create
				</button>
			</form>
		</div>
		<div class="mb-[1px] flex items-end">
			<button
				aria-label="Delete Todo"
				hx-delete="/todos/all"
				hx-target="#todo-list"
				hx-swap="innerHTML"
				hx-trigger="click"
				hx-confirm="Are you sure you want to delete all todos?"
				class="negative zion-button flex-nowrap text-nowrap"
			>
				delete all
			</button>
		</div>
	</div>
}

// Empty/Error Templates
templ EmptyTodoList() {
	<li id="empty-todo-msg" class="font-mono text-sm text-red-700">
		no todos found
	</li>
}

templ EmptyTodoItemList(todoId string) {
	<li
		id={ "empty-todo-item-msg-" + todoId }
		class="font-mono text-xs text-red-700"
	>
		no items found
	</li>
}

// Scripts

script removeEmptyTodoMessage() {
	const msgId = "empty-todo-msg";
	const msg = document.getElementById(msgId);
	if (msg) {
		msg.remove();
	}
}

script removeEmptyTodoListMessage(id string) {
	const msgId = "empty-todo-item-msg-" + id;
	const msg = document.getElementById(msgId);
	if (msg) {
		msg.remove();
	}
}
